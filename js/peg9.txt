start
  =space "#include" space "<stdio.h>" space coment* "int" space "main" space "(void)" block:block space {return block;}

block
  = space "{" space script:script* space "}" space {return script;}

script
  = divergence_if
  / divergence
  / statement
  / substitution
  / repetition
  / scanf
  / printf
  / break
  / return
  / coment

//------------------------------------------------------------

//宣言
statement
  = statement_array_int_2
  / statement_array_int
  / array_char_2
  / array_char
  / statement_int
  / statement_char

statement_int
  = type:type " " space variable:variable space ";" space {return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');duplication_judge("'+ type + '","' + variable + '", null );' ;}
  / type:type " " space left:variable space "=" space right:additive space ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');duplication_judge("' + type + '","' + left + '","' + right + '");' ;}
  / type:type " " space contents:(statement_plural* st_content_int) space  ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');plural_declaration("' + type +'","' + contents + '");' ;} 
	
statement_char
  =  "char " space variable:variable space ";" space {return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');duplication_judge("char","' + variable + '", null );' ;}
  /  "char " space left:variable space "=" space ['] space right:[a-zA-Z]* space ['] space ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');duplication_judge("char","' + left + '","' + right + '");' ;}
    /  "char " space left:variable space "=" space right:variable space ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');duplication_judge("char","' + left + '","' + right + '");' ;}
 /  "char " space contents:(statement_plural_char* st_content_char) space  ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');plural_declaration("char"' + ',"' + contents + '");' ;} 

//複数宣言
statement_plural
 = space contents:st_content_int space "," space {return contents;}
 statement_plural_char
 = space contents:(initialization_char/variable/array_nul/state_array) space "," space {return contents;}

state_array
 = ar:array_nul space "=" space cnt:array_contents { return ar + "=" + cnt ; }
 / ar:variable_array space "=" space cnt:array_contents { return ar + "=" + cnt ; }

array_nul
  = variable:variable "[" space "]" { return variable + "[]" ; }

st_content_int
 = c:(state_array/array_nul/variable_array/initialization/variable) {return c;}
 
st_content_char
 =c:(state_array/array_nul/initialization_char/variable) {return c;}

//初期化
initialization
 =  left:variable space "=" space right:additive space { return left + "=" + right ; } 
initialization_char
 =  left:variable space "=" space ['] space right:[a-zA-Z] space ['] space { return left + "=" + right ; } 
 / left:variable space "=" space right:variable space { return left + "=" + right ; } 

//配列宣言
//配列（int）
statement_array_int
= type:type " " space name:variable "[" space length:additive space "]"  ";" space { return  'push_line(' + peg$computePosDetails(peg$reportedPos).line +');array_declare("' + type + '","' + name + '","undefined",' + length + ');'  }

//長さ指定あり、中身あり
/  type:type " " space name:variable "[" space length:additive space "]" space "=" variable:array_contents  ";" space {
		return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');array_declare("' + type + '","' + name + '","' + variable + '",' + length + ');'   }
/  type:type " " space name:variable "[" space length:additive space "]" space "=" variable:array_contents space  ";" space {
		return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');array_declare("' + type + '","' + name + '","' + variable + '",' + length + ');'  }

//長さ指定なし、中身あり
/  type:type " " space name:variable "[" space "]" space ";" space {
		return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');array_declare("' + type + '","' + name + '","undefined","undefined");'   }
/  type:type " " space name:variable "[" space "]" space "=" variable:array_contents  ";" space {
		return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');array_declare("'+ type +'","' + name + '","' + variable + '","undefined");'   }
/  type:type " " space name:variable "[" space "]" space "=" variable:array_contents  ";" space {
		return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');array_declare("' + type + '","' + name + '","' + variable + '");'  }

//二次元配列
statement_array_int_2
  =  type:type " " space variable:variable "[" space length1:additive space "]" "[" space length2:additive space "]" space ";" space { 
  return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');multiarray_declare("' + type + '","' + variable +'","undefined","' + length1 + '","' + length2 + '");'  }
  /  type:type " " space variable:variable "[" space length1:additive space "]" "[" space "]" space ";" space { 
  return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');multiarray_declare("' + type + '","' + variable +'","undefined","' + length1 + '","undefined");'  }
  / type:type " " space variable:variable "[" space "]" "[" space length2:additive space "]" space ";" space { 
  return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');multiarray_declare("'+ type +'","' + variable +'","undefined","undefined","' + length2 + '");'  }
  //上から　a[1][2];　a[1][];　a[][2];　のとき
  
  / type:type " " space variable:variable "[" space length1:additive space "]" "[" space length2:additive space "]"  space "=" space contents:array_contents2 space  ";" space { 
  return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');multiarray_declare("' + type + '","' + variable +'","' + contents + '","' + length1 + '","' + length2 + '");' }
  / type:type " " space variable:variable "[" space length1:additive space "]" "[" space "]"  space "=" space contents:array_contents2 space  ";" space { 
  return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');multiarray_declare("'+ type + '","' + variable +'","' + contents + '","' + length1 + '","undefined");' }
  / type:type " " space variable:variable "[" space "]" "[" space length2:additive space "]"  space "=" space contents:array_contents2 space  ";" space { 
  return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');multiarray_declare("' + type + '","' + variable +'","' + contents + '","undefined","' + length2 + '");' }
  //a[1][2] = {{3,4}{5,6}}のとき

  / type:type " " space variable:variable "[" space "]" "[" space "]" space ";" space { 
  return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');multiarray_declare("' + type + '","' + variable +'","undefined","undefined","undefined");'  }
  / type:type " " space variable:variable "[" space "]" "[" space "]"  space "=" space contents:array_contents2 space  ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');multiarray_declare("' + type + '","' + variable +'","' + contents + '","undefined","undefined");'  }
  //長さ指定なし
  
//配列の初期化{1,2,3,4}みたいなやつ
array_contents
 =space  "{"space contents:additive_plural_array space "}" space {return contents}
 
//二次元配列のとき{{},{}}
array_contents2
 = space  "{" contents:additive_plural_array2 space "}" space {return  contents;}
 
//数値、数値....
 additive_plural_array
 = space left:additive space "," space right:additive_plural_array {return left + "@" + right;}
 /  additive
 
 //{},{}...
additive_plural_array2
 = space left:array_contents space "," space right:additive_plural_array2 space {return left + "^" + right;}
 /array_contents
 
 //文字列の配列
array_char
= "char " space name:variable "[" space "]" space ";" space { return  'push_line(' + peg$computePosDetails(peg$reportedPos).line +');array_declare("char","' + name + '","undefined","undefined");' ;}
 / "char " space name:variable "[" space length:additive space "]" space  ";" space { return  'push_line(' + peg$computePosDetails(peg$reportedPos).line +');array_declare("char","' + name + '","undefined",' + length + ');'  }
  / "char " space name:variable "[" space "]" space "=" space ["] space content:character space ["] space ";" space { return  'push_line(' + peg$computePosDetails(peg$reportedPos).line +');array_declare("char","' + name + '","' + content + '","undefined");'  }
  / "char " space name:variable "[" space length:additive space  "]" space "=" space ["] space content:character space ["] space ";" space { return  'push_line(' + peg$computePosDetails(peg$reportedPos).line +');array_declare("char","' + name + '","' + content + '","' + length + '");'  }
  
array_char_2
  = "char " space variable:variable "[" space length1:additive space "]" "[" space length2:additive space "]" space ";" space { 
  return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');multiarray_declare("char","' + variable +'","undefined","' + length1 + '","' + length2 + '");'  }
  / "char " space variable:variable "[" space "]" "[" space "]" space ";" space { 
  return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');multiarray_declare("char","' + variable +'","undefined","undefined","undefined");'  }
  / "char " space variable:variable "[" space length1:additive space "]" "[" space length2:additive space "]" space "=" space content:array_contents_char space ";" space { 
  return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');multiarray_declare("char","' + variable +'","' + content + '","' + length1 + '","' + length2 + '");'  }
  / "char " space variable:variable "[" space "]" "[" space "]" space "=" space content:array_contents_char space ";" space { 
  return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');multiarray_declare("char","' + variable +'","' + content + '","undefined","undefined");'  }
 
 //char型二次元配列の初期化
array_contents_char
 =space  "{"space contents:additive_plural_array_char space "}" space {return contents}

 additive_plural_array_char
 = space ["] space left:character space ["] space "," space right:additive_plural_array_char {return left + "@" + right;}
 /  ["] space content:character space ["] space {return content;}
//------------------------------------------------------------

//繰り返し
repetition
 = repetition_for
 /repetition_while

repetition_for
  =  "for" space "(" space left:variable space "=" space right:additive space ";" space comparison:logical space ";" space  substitution:substitution_for space  ")" space block:block space {
        var a = block[0];
        if(block.length == 0){
          a = "";
        }
       for(var k=1; k < block.length; k++){
         a = a + block[k];
       }
    return 'for_js("false,' + left + ',' + right + '","' + comparison + '","' + substitution + '","' + peg$computePosDetails(peg$reportedPos).line + '");' + a  + 'end_of_for();'; 
  }
  
  /  "for" space "(" space va:("int"/"double") space left:variable space "=" space right:additive space ";" space comparison:logical space ";" space  substitution:substitution_for space  ")" space block:block space {
        var a = block[0];
        if(block.length == 0){
          a = "";
        }
       for(var k=1; k < block.length; k++){
         a = a + block[k];
       }
    return 'for_js("true,' + va + ',' + left + ',' + right + '","' + comparison + '","' + substitution + '","' + peg$computePosDetails(peg$reportedPos).line + '");' + a  + 'end_of_for();'; 
    }
  
repetition_while
 =  "while"  space "(" space comparison:(logical/additive) space ")" space block:block space {
        var a = block[0];
        if(block.length == 0){
          a = "";
        }
       for(var k=1; k < block.length; k++){
         a = a + block[k];
       }
    return 'for_js("while","' + comparison + '","","' + peg$computePosDetails(peg$reportedPos).line + '");' + a  + 'end_of_for();'; }


break
 =  "break" space ";" space {return "break_js();" ;}

//------------------------------------------------------------
  
//分岐
divergence_if
= result:divergence_else { return result + 'end_of_if();' ;  }

divergence_else
= left:divergence_else_if space "else" space block:block {
     var a = block[0];
        if(block.length == 0){
          a = "";
        }
       for(var k=1; k < block.length; k++){
         a = a + block[k];
       }
     return left + 'else_js();' + a;}
/  divergence_else_if

divergence_else_if
= left:divergence space "else " space "if" space "(" space comparison:logical space ")" space block:block right:divergence_else_if_2* {
        var a = block[0];
        if(block.length == 0){
          a = "";
        }
        for(var k=1; k < block.length; k++){
          a = a + block[k];
        }
        comparison = comparison.replace(/:/g,"");
        return left + 'else_if_js("' + comparison + '");' + a + right;}
/ left:divergence space "else " space "if" space "(" space comparison:logical space ")" space block:block {
        var a = block[0];
        if(block.length == 0){
          a = "";
        }
        for(var k=1; k < block.length; k++){
          a = a + block[k];
        }
        comparison = comparison.replace(/:/g,"");
        return left + 'else_if_js("' + comparison + '");' + a;}
/ divergence

divergence_else_if_2
= "else" space "if" space "(" space comparison:logical space ")" space block:block {
        var a = block[0];
        if(block.length == 0){
          a = "";
        }
        for(var k=1; k < block.length; k++){
          a = a + block[k];
        }
        comparison = comparison.replace(/:/g,"");
        return 'else_if_js("' + comparison + '");' + a;}

divergence
= "if" space "(" space comparison:logical space ")" space block:block space {
         var a = block[0];
        if(block.length == 0){
          a = "";
        }
        for(var k=1; k < block.length; k++){
          a = a + block[k];
        }
        comparison = comparison.replace(/:/g,"");
        return 'if_js("' + comparison + '");' + a ;}


//------------------------------------------------------------

//代入  
substitution
  =  left:(variable_array/variable) space "=" space right:(variable_array/variable/minus/decimal) space ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');substitute("' + left + '","' + right + '");' ; } 
  /   left:(variable_array/variable) space "=" space right:additive space ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');substitute("' + left + '","' + right + '");' ; } 
  /   left:(variable_array/variable) space "++" space ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');substitute("' + left + '","' + left + ':+:1'+ '");' ; }
  /   left:(variable_array/variable) space "--" space ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');substitute("' + left + '","' + left + ':-:1' + '");' ; }
  /  left:(variable_array/variable) space "+=" space right:additive space ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');substitute("' + left + '","' + left + ':+:' + right + '");' ; }
  /   left:(variable_array/variable) space "-=" space right:additive space ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');substitute("' + left + '","' + left + ':-:' + right + '");' ; }
  /   left:(variable_array/variable) space "=" space "'" right:[a-zA-Z] "'" space ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');substitute("' + left + '","' + right + '");' ; } 
  /left:(variable_array/variable) space "=" space "'" right:character "'" space ";" space { return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');substitute("' + left + '","' + right + '");' ; } 

//for文で用いる代入・演算
substitution_for
  = left:variable space "=" space right:additive space { return left + " = " + right ; } 
  /   left:variable "++" space { return left + ":+:1" ; }
  /   left:variable "--" space { return left + ":-:1" ; }
  /   left:variable "+=" right:additive space space { return left + ":+:" + right ; }
  /   left:variable "-=" right:additive space space { return left + ":-:" + right ; }

//------------------------------------------------------------

//論理演算子
logical
 = logical_and
 / logical_or
 / logical_not
 / comparison
 
logical_and
 = left:comparison space "&&" space right:logical space space { return left + " && " + right ; }

logical_or
 = left:comparison space "||" space right:logical space space {return left + " || " + right ; }
 
logical_not
 = space "!" space comparison_same:logical space space { return "!" + comparison_same ;}

//比較
comparison
  = comparison_same
  / comparison_greater_than
  / comparison_less_than
  / comparison_greater_than_or_equal
  / comparison_less_than_or_equal
  / comparison_not_equal

comparison_same
  = left:additive space "==" space right:additive space  { return left + " == " + right ; }
  
comparison_greater_than
  = left:additive space ">" space right:additive  space  { return left + " > " + right ; }
  
comparison_less_than
  = left:additive space "<" space right:additive space  { return left + " < " + right ; }
  
comparison_greater_than_or_equal
  = left:additive space ">=" space right:additive space  { return left + " >= " + right ; }
  
comparison_less_than_or_equal
  = left:additive space "<=" space right:additive space  { return left + " <= " + right ; }
  
comparison_not_equal
  = left:additive space "!=" space right:additive space  { return left + " != " + right ; }


//------------------------------------------------------------

//スキャン
scanf
  =  "scanf" space "("  space ["] type:scan_type ["] space "," space "&" space variable:variable space ")" [\n]* ";" space{ return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');scanf_js("' + variable + '","' + type + '");' ;  }
  /  "scanf" space "(" space ["] space   contents:scan_val space ["]   space "," space variable:additive_plural_scan space ")" space ";" space {
   contents = contents.replace(/::::/g,":: ::")
   return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');scanf_js("' + variable + '","' + contents + '");' ; }

scan_val
  =left:[\x20]* type:scan_type right:scan_val { return "::" + type + "::" + right; }
  / [\x20]* { return ""; }

scan_type
  = "%" type:("d"/"o"/"x"/"X"/"c"/"s"/"f"/"lf")  {return "%" + type;}
  
additive_plural_scan
 = space "&" left:additive space "," space right:additive_plural_scan {return left + "," + right;}
 /  "&" add:additive {return add}
  
//プリント
printf
  =  "printf" space "(" space ["] space type:print_type space  ["] space "," space variable:variable space ")" [\n]* ";" space {return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');printf_js("' + variable + '","' + type + '");' ;  }
  
  /  "printf" space "(" space ["] space   contents:print_val space ["]   space "," space variable:additive_plural space ")" space ";" space {
    if(contents.indexOf("\\") != -1){
  	contents = contents.replace(/\\/g,"\\\\");
  }
   if(contents.indexOf("\\n") != -1){
  	contents = contents.replace(/\\n/g,"/n");
  }
   return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');printf_js("' + variable + '","' + contents + '");' ; }
  
  /  "printf" space "(" space ["] contents:letter_2 ["] space ")" space ";" space {    
	if(contents.indexOf("\\") != -1){
  		contents = contents.replace(/\\/g,"\\\\");
 	} 
 	   if(contents.indexOf("\\n") != -1){
  	contents = contents.replace(/\\n/g,"/n");
  }
  	return 'push_line(' + peg$computePosDetails(peg$reportedPos).line +');printf_djs("' + contents + '");' ; }

print_val
  =left:letter type:print_type right:print_val {
  		return left + ":@:" + type + ":@:" + right; }
  /  letter
  
print_type
  ="%" type:("d"/"o"/"x"/"X"/"u"/"s"/"f"/"e"/"E"/"g"/"G"/"c") {return "%" + type;}

//なんでもいい文字列
letter
 =letter:[^"%,+]* { return letter.join("").replace(/,/g,""); }
 
letter_2
 =letter:[^"]* { return letter.join("").replace(/,/g,""); }

 
additive_plural
 = space left:additive space "," space right:additive_plural {return left + "," + right;}
 /  additive
 
 //------------------------------------------------------------
 
 //リターン
 return
  =  "return" space result:additive space ";" space {return "push_line(" + peg$computePosDetails(peg$reportedPos).line +");return_js(" + result + ");" ;}

//------------------------------------------------------------

//四則演算
additive
  = left:multiplicative space "+" space right:additive { return left + ":" + "+" + ":" + right; }
  / multiplicative

multiplicative
  = left:subtraction space "*" space right:multiplicative { return left + ":" + "*" + ":" + right; }
  / subtraction

subtraction
  = left:division space "-" space right:subtraction {  return left + ":" + "-" + ":" + right;  }
  / division

division
  = left:primary space "/" space right:division {  return left + ":" + "/" + ":" + right;  }
  / remainder
  
remainder
   = left:primary space "%" space right:division {  return left + ":" + "%" + ":" + right;  }
  / primary

primary
  = minus
  / decimal
  / variable_array
  / variable
  / "(" additive:additive ")" { return "(" + ":" + additive + ":" + ")"; }

//マイナス
minus
 = "-" result:decimal {return "-" + result}

//少数
decimal
 = left:integer "." right:decimal_places { return parseFloat(left + "." + right) }
 / integer

//整数
integer "integer"
  = digits:[0-9]+ { return parseInt(digits.join(""), 10); }
 


//小数点以下
decimal_places
 = digits:[0-9]+ { return digits.join("").replace(/,/g,""); }

//文字列
character
 = char:([a-zA-Z0-9]*) { return char.join("@").replace(/,/g,""); }
 
 //変数命名規約
variable
  = variable:([a-zA-Z][a-zA-Z0-9]*) { return variable.join("").replace(/,/g,""); }

//配列
variable_array
 = variable:variable "[" num1:(variable/integer) "]" space "[" num2:(variable/integer) "]" { return variable + "[" + num1 + "][" + num2 + "]"  }
 / variable:variable "[" num:(variable/integer) "]" { return variable + "[" + num + "]" }

//改行・コメント
space
  = [\x20\n\t]*
  / coment

type
 = t:("int"/"double") { return t; }

coment
  = "//" [^\n]* [\n] space {return  "push_line(" + peg$computePosDetails(peg$reportedPos).line +");"}

//------------------------------------------------------------
